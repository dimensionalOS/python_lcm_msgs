"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from lcm_msgs import std_msgs
from .MultiDOFJointTrajectoryPoint import MultiDOFJointTrajectoryPoint
class MultiDOFJointTrajectory(object):

    __slots__ = ["joint_names_length", "points_length", "header", "joint_names", "points"]

    __typenames__ = ["int32_t", "int32_t", "std_msgs.Header", "string", "MultiDOFJointTrajectoryPoint"]

    __dimensions__ = [None, None, None, ["joint_names_length"], ["points_length"]]

    def __init__(self):
        self.joint_names_length = 0
        """ LCM Type: int32_t """
        self.points_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.joint_names = []
        """ LCM Type: string[joint_names_length] """
        self.points = []
        """ LCM Type: MultiDOFJointTrajectoryPoint[points_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(MultiDOFJointTrajectory._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.joint_names_length, self.points_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        for i0 in range(self.joint_names_length):
            __joint_names_encoded = self.joint_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__joint_names_encoded)+1))
            buf.write(__joint_names_encoded)
            buf.write(b"\0")
        for i0 in range(self.points_length):
            assert self.points[i0]._get_packed_fingerprint() == MultiDOFJointTrajectoryPoint._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != MultiDOFJointTrajectory._get_packed_fingerprint():
            raise ValueError("Decode error")
        return MultiDOFJointTrajectory._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = MultiDOFJointTrajectory()
        self.joint_names_length, self.points_length = struct.unpack(">ii", buf.read(8))
        self.header = std_msgs.Header._decode_one(buf)
        self.joint_names = []
        for i0 in range(self.joint_names_length):
            __joint_names_len = struct.unpack('>I', buf.read(4))[0]
            self.joint_names.append(buf.read(__joint_names_len)[:-1].decode('utf-8', 'replace'))
        self.points = []
        for i0 in range(self.points_length):
            self.points.append(MultiDOFJointTrajectoryPoint._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if MultiDOFJointTrajectory in parents: return 0
        newparents = parents + [MultiDOFJointTrajectory]
        tmphash = (0xf09db31afe774086+ std_msgs.Header._get_hash_recursive(newparents)+ MultiDOFJointTrajectoryPoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if MultiDOFJointTrajectory._packed_fingerprint is None:
            MultiDOFJointTrajectory._packed_fingerprint = struct.pack(">Q", MultiDOFJointTrajectory._get_hash_recursive([]))
        return MultiDOFJointTrajectory._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", MultiDOFJointTrajectory._get_packed_fingerprint())[0]

