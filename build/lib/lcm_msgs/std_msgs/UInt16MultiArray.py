"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from .MultiArrayLayout import MultiArrayLayout
class UInt16MultiArray(object):

    __slots__ = ["data_length", "layout", "data"]

    __typenames__ = ["int32_t", "MultiArrayLayout", "int16_t"]

    __dimensions__ = [None, None, ["data_length"]]

    def __init__(self):
        self.data_length = 0
        """ LCM Type: int32_t """
        self.layout = MultiArrayLayout()
        """ LCM Type: MultiArrayLayout """
        self.data = []
        """ LCM Type: int16_t[data_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(UInt16MultiArray._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.data_length))
        assert self.layout._get_packed_fingerprint() == MultiArrayLayout._get_packed_fingerprint()
        self.layout._encode_one(buf)
        buf.write(struct.pack('>%dh' % self.data_length, *self.data[:self.data_length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != UInt16MultiArray._get_packed_fingerprint():
            raise ValueError("Decode error")
        return UInt16MultiArray._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = UInt16MultiArray()
        self.data_length = struct.unpack(">i", buf.read(4))[0]
        self.layout = MultiArrayLayout._decode_one(buf)
        self.data = struct.unpack('>%dh' % self.data_length, buf.read(self.data_length * 2))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if UInt16MultiArray in parents: return 0
        newparents = parents + [UInt16MultiArray]
        tmphash = (0xaa51366c8f222c76+ MultiArrayLayout._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if UInt16MultiArray._packed_fingerprint is None:
            UInt16MultiArray._packed_fingerprint = struct.pack(">Q", UInt16MultiArray._get_hash_recursive([]))
        return UInt16MultiArray._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", UInt16MultiArray._get_packed_fingerprint())[0]

