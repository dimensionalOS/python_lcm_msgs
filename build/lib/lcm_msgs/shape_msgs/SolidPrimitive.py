"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class SolidPrimitive(object):

    __slots__ = ["dimensions_length", "type", "dimensions"]

    __typenames__ = ["int32_t", "byte", "double"]

    __dimensions__ = [None, None, ["dimensions_length"]]

    BOX = 1
    SPHERE = 2
    CYLINDER = 3
    CONE = 4
    BOX_X = 0
    BOX_Y = 1
    BOX_Z = 2
    SPHERE_RADIUS = 0
    CYLINDER_HEIGHT = 0
    CYLINDER_RADIUS = 1
    CONE_HEIGHT = 0
    CONE_RADIUS = 1

    def __init__(self):
        self.dimensions_length = 0
        """ LCM Type: int32_t """
        self.type = 0
        """ LCM Type: byte """
        self.dimensions = []
        """ LCM Type: double[dimensions_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(SolidPrimitive._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iB", self.dimensions_length, self.type))
        buf.write(struct.pack('>%dd' % self.dimensions_length, *self.dimensions[:self.dimensions_length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SolidPrimitive._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SolidPrimitive._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = SolidPrimitive()
        self.dimensions_length, self.type = struct.unpack(">iB", buf.read(5))
        self.dimensions = struct.unpack('>%dd' % self.dimensions_length, buf.read(self.dimensions_length * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if SolidPrimitive in parents: return 0
        tmphash = (0xb8a8e7178cab07ac) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if SolidPrimitive._packed_fingerprint is None:
            SolidPrimitive._packed_fingerprint = struct.pack(">Q", SolidPrimitive._get_hash_recursive([]))
        return SolidPrimitive._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SolidPrimitive._get_packed_fingerprint())[0]

