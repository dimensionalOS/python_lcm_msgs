"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from . import *
from .Marker import Marker
class InteractiveMarkerControl(object):

    __slots__ = ["markers_length", "name", "orientation", "orientation_mode", "interaction_mode", "always_visible", "markers", "independent_marker_orientation", "description"]

    __typenames__ = ["int32_t", "string", "geometry_msgs.Quaternion", "byte", "byte", "boolean", "Marker", "boolean", "string"]

    __dimensions__ = [None, None, None, None, None, None, ["markers_length"], None, None]

    INHERIT = 0
    FIXED = 1
    VIEW_FACING = 2
    NONE = 0
    MENU = 1
    BUTTON = 2
    MOVE_AXIS = 3
    MOVE_PLANE = 4
    ROTATE_AXIS = 5
    MOVE_ROTATE = 6
    MOVE_3D = 7
    ROTATE_3D = 8
    MOVE_ROTATE_3D = 9

    def __init__(self):
        self.markers_length = 0
        """ LCM Type: int32_t """
        self.name = ""
        """ LCM Type: string """
        self.orientation = geometry_msgs.Quaternion()
        """ LCM Type: geometry_msgs.Quaternion """
        self.orientation_mode = 0
        """ LCM Type: byte """
        self.interaction_mode = 0
        """ LCM Type: byte """
        self.always_visible = False
        """ LCM Type: boolean """
        self.markers = []
        """ LCM Type: Marker[markers_length] """
        self.independent_marker_orientation = False
        """ LCM Type: boolean """
        self.description = ""
        """ LCM Type: string """

    def encode(self):
        buf = BytesIO()
        buf.write(InteractiveMarkerControl._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.markers_length))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        assert self.orientation._get_packed_fingerprint() == geometry_msgs.Quaternion._get_packed_fingerprint()
        self.orientation._encode_one(buf)
        buf.write(struct.pack(">BBb", self.orientation_mode, self.interaction_mode, self.always_visible))
        for i0 in range(self.markers_length):
            assert self.markers[i0]._get_packed_fingerprint() == Marker._get_packed_fingerprint()
            self.markers[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.independent_marker_orientation))
        __description_encoded = self.description.encode('utf-8')
        buf.write(struct.pack('>I', len(__description_encoded)+1))
        buf.write(__description_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != InteractiveMarkerControl._get_packed_fingerprint():
            raise ValueError("Decode error")
        return InteractiveMarkerControl._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = InteractiveMarkerControl()
        self.markers_length = struct.unpack(">i", buf.read(4))[0]
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.orientation = geometry_msgs.Quaternion._decode_one(buf)
        self.orientation_mode, self.interaction_mode = struct.unpack(">BB", buf.read(2))
        self.always_visible = bool(struct.unpack('b', buf.read(1))[0])
        self.markers = []
        for i0 in range(self.markers_length):
            self.markers.append(Marker._decode_one(buf))
        self.independent_marker_orientation = bool(struct.unpack('b', buf.read(1))[0])
        __description_len = struct.unpack('>I', buf.read(4))[0]
        self.description = buf.read(__description_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if InteractiveMarkerControl in parents: return 0
        newparents = parents + [InteractiveMarkerControl]
        tmphash = (0x9e1db7d7740da609+ geometry_msgs.Quaternion._get_hash_recursive(newparents)+ Marker._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if InteractiveMarkerControl._packed_fingerprint is None:
            InteractiveMarkerControl._packed_fingerprint = struct.pack(">Q", InteractiveMarkerControl._get_hash_recursive([]))
        return InteractiveMarkerControl._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", InteractiveMarkerControl._get_packed_fingerprint())[0]

