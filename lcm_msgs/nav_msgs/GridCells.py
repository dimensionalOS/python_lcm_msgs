"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class GridCells(object):

    __slots__ = ["cells_length", "header", "cell_width", "cell_height", "cells"]

    __typenames__ = ["int32_t", "std_msgs.Header", "float", "float", "geometry_msgs.Point"]

    __dimensions__ = [None, None, None, None, ["cells_length"]]

    def __init__(self):
        self.cells_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.cell_width = 0.0
        """ LCM Type: float """
        self.cell_height = 0.0
        """ LCM Type: float """
        self.cells = []
        """ LCM Type: geometry_msgs.Point[cells_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(GridCells._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.cells_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ff", self.cell_width, self.cell_height))
        for i0 in range(self.cells_length):
            assert self.cells[i0]._get_packed_fingerprint() == geometry_msgs.Point._get_packed_fingerprint()
            self.cells[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != GridCells._get_packed_fingerprint():
            raise ValueError("Decode error")
        return GridCells._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = GridCells()
        self.cells_length = struct.unpack(">i", buf.read(4))[0]
        self.header = std_msgs.Header._decode_one(buf)
        self.cell_width, self.cell_height = struct.unpack(">ff", buf.read(8))
        self.cells = []
        for i0 in range(self.cells_length):
            self.cells.append(geometry_msgs.Point._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if GridCells in parents: return 0
        newparents = parents + [GridCells]
        tmphash = (0xb855326533062750+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Point._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if GridCells._packed_fingerprint is None:
            GridCells._packed_fingerprint = struct.pack(">Q", GridCells._get_hash_recursive([]))
        return GridCells._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", GridCells._get_packed_fingerprint())[0]

