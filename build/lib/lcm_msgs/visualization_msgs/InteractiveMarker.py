"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
from . import *
from .MenuEntry import MenuEntry
from .InteractiveMarkerControl import InteractiveMarkerControl
class InteractiveMarker(object):

    __slots__ = ["menu_entries_length", "controls_length", "header", "pose", "name", "description", "scale", "menu_entries", "controls"]

    __typenames__ = ["int32_t", "int32_t", "std_msgs.Header", "geometry_msgs.Pose", "string", "string", "float", "MenuEntry", "InteractiveMarkerControl"]

    __dimensions__ = [None, None, None, None, None, None, None, ["menu_entries_length"], ["controls_length"]]

    def __init__(self):
        self.menu_entries_length = 0
        """ LCM Type: int32_t """
        self.controls_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.name = ""
        """ LCM Type: string """
        self.description = ""
        """ LCM Type: string """
        self.scale = 0.0
        """ LCM Type: float """
        self.menu_entries = []
        """ LCM Type: MenuEntry[menu_entries_length] """
        self.controls = []
        """ LCM Type: InteractiveMarkerControl[controls_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(InteractiveMarker._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.menu_entries_length, self.controls_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        __description_encoded = self.description.encode('utf-8')
        buf.write(struct.pack('>I', len(__description_encoded)+1))
        buf.write(__description_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">f", self.scale))
        for i0 in range(self.menu_entries_length):
            assert self.menu_entries[i0]._get_packed_fingerprint() == MenuEntry._get_packed_fingerprint()
            self.menu_entries[i0]._encode_one(buf)
        for i0 in range(self.controls_length):
            assert self.controls[i0]._get_packed_fingerprint() == InteractiveMarkerControl._get_packed_fingerprint()
            self.controls[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != InteractiveMarker._get_packed_fingerprint():
            raise ValueError("Decode error")
        return InteractiveMarker._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = InteractiveMarker()
        self.menu_entries_length, self.controls_length = struct.unpack(">ii", buf.read(8))
        self.header = std_msgs.Header._decode_one(buf)
        self.pose = geometry_msgs.Pose._decode_one(buf)
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        __description_len = struct.unpack('>I', buf.read(4))[0]
        self.description = buf.read(__description_len)[:-1].decode('utf-8', 'replace')
        self.scale = struct.unpack(">f", buf.read(4))[0]
        self.menu_entries = []
        for i0 in range(self.menu_entries_length):
            self.menu_entries.append(MenuEntry._decode_one(buf))
        self.controls = []
        for i0 in range(self.controls_length):
            self.controls.append(InteractiveMarkerControl._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if InteractiveMarker in parents: return 0
        newparents = parents + [InteractiveMarker]
        tmphash = (0xe9ed8e5f9a72545f+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Pose._get_hash_recursive(newparents)+ MenuEntry._get_hash_recursive(newparents)+ InteractiveMarkerControl._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if InteractiveMarker._packed_fingerprint is None:
            InteractiveMarker._packed_fingerprint = struct.pack(">Q", InteractiveMarker._get_hash_recursive([]))
        return InteractiveMarker._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", InteractiveMarker._get_packed_fingerprint())[0]

