"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class Imu(object):

    __slots__ = ["header", "orientation", "orientation_covariance", "angular_velocity", "angular_velocity_covariance", "linear_acceleration", "linear_acceleration_covariance"]

    __typenames__ = ["std_msgs.Header", "geometry_msgs.Quaternion", "double", "geometry_msgs.Vector3", "double", "geometry_msgs.Vector3", "double"]

    __dimensions__ = [None, None, [9], None, [9], None, [9]]

    def __init__(self):
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.orientation = geometry_msgs.Quaternion()
        """ LCM Type: geometry_msgs.Quaternion """
        self.orientation_covariance = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """
        self.angular_velocity = geometry_msgs.Vector3()
        """ LCM Type: geometry_msgs.Vector3 """
        self.angular_velocity_covariance = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """
        self.linear_acceleration = geometry_msgs.Vector3()
        """ LCM Type: geometry_msgs.Vector3 """
        self.linear_acceleration_covariance = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """

    def encode(self):
        buf = BytesIO()
        buf.write(Imu._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.orientation._get_packed_fingerprint() == geometry_msgs.Quaternion._get_packed_fingerprint()
        self.orientation._encode_one(buf)
        buf.write(struct.pack('>9d', *self.orientation_covariance[:9]))
        assert self.angular_velocity._get_packed_fingerprint() == geometry_msgs.Vector3._get_packed_fingerprint()
        self.angular_velocity._encode_one(buf)
        buf.write(struct.pack('>9d', *self.angular_velocity_covariance[:9]))
        assert self.linear_acceleration._get_packed_fingerprint() == geometry_msgs.Vector3._get_packed_fingerprint()
        self.linear_acceleration._encode_one(buf)
        buf.write(struct.pack('>9d', *self.linear_acceleration_covariance[:9]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Imu._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Imu._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Imu()
        self.header = std_msgs.Header._decode_one(buf)
        self.orientation = geometry_msgs.Quaternion._decode_one(buf)
        self.orientation_covariance = struct.unpack('>9d', buf.read(72))
        self.angular_velocity = geometry_msgs.Vector3._decode_one(buf)
        self.angular_velocity_covariance = struct.unpack('>9d', buf.read(72))
        self.linear_acceleration = geometry_msgs.Vector3._decode_one(buf)
        self.linear_acceleration_covariance = struct.unpack('>9d', buf.read(72))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Imu in parents: return 0
        newparents = parents + [Imu]
        tmphash = (0x55c1e238541325f6+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Quaternion._get_hash_recursive(newparents)+ geometry_msgs.Vector3._get_hash_recursive(newparents)+ geometry_msgs.Vector3._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Imu._packed_fingerprint is None:
            Imu._packed_fingerprint = struct.pack(">Q", Imu._get_hash_recursive([]))
        return Imu._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Imu._get_packed_fingerprint())[0]

