"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class Duration(object):

    __slots__ = ["sec", "nanosec"]

    __typenames__ = ["int32_t", "int32_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.sec = 0
        """ LCM Type: int32_t """
        self.nanosec = 0
        """ LCM Type: int32_t """

    def encode(self):
        buf = BytesIO()
        buf.write(Duration._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.sec, self.nanosec))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Duration._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Duration._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Duration()
        self.sec, self.nanosec = struct.unpack(">ii", buf.read(8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Duration in parents: return 0
        tmphash = (0x263f39efa2a9af63) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Duration._packed_fingerprint is None:
            Duration._packed_fingerprint = struct.pack(">Q", Duration._get_hash_recursive([]))
        return Duration._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Duration._get_packed_fingerprint())[0]

