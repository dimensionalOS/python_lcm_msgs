"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
from . import *
from .ChannelFloat32 import ChannelFloat32
class PointCloud(object):

    __slots__ = ["points_length", "channels_length", "header", "points", "channels"]

    __typenames__ = ["int32_t", "int32_t", "std_msgs.Header", "geometry_msgs.Point32", "ChannelFloat32"]

    __dimensions__ = [None, None, None, ["points_length"], ["channels_length"]]

    def __init__(self):
        self.points_length = 0
        """ LCM Type: int32_t """
        self.channels_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.points = []
        """ LCM Type: geometry_msgs.Point32[points_length] """
        self.channels = []
        """ LCM Type: ChannelFloat32[channels_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(PointCloud._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.points_length, self.channels_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        for i0 in range(self.points_length):
            assert self.points[i0]._get_packed_fingerprint() == geometry_msgs.Point32._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        for i0 in range(self.channels_length):
            assert self.channels[i0]._get_packed_fingerprint() == ChannelFloat32._get_packed_fingerprint()
            self.channels[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PointCloud._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PointCloud._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = PointCloud()
        self.points_length, self.channels_length = struct.unpack(">ii", buf.read(8))
        self.header = std_msgs.Header._decode_one(buf)
        self.points = []
        for i0 in range(self.points_length):
            self.points.append(geometry_msgs.Point32._decode_one(buf))
        self.channels = []
        for i0 in range(self.channels_length):
            self.channels.append(ChannelFloat32._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if PointCloud in parents: return 0
        newparents = parents + [PointCloud]
        tmphash = (0x3ff7dc99e345164e+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Point32._get_hash_recursive(newparents)+ ChannelFloat32._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if PointCloud._packed_fingerprint is None:
            PointCloud._packed_fingerprint = struct.pack(">Q", PointCloud._get_hash_recursive([]))
        return PointCloud._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PointCloud._get_packed_fingerprint())[0]

