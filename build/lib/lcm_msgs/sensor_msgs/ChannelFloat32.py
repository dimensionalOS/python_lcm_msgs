"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class ChannelFloat32(object):

    __slots__ = ["values_length", "name", "values"]

    __typenames__ = ["int32_t", "string", "float"]

    __dimensions__ = [None, None, ["values_length"]]

    def __init__(self):
        self.values_length = 0
        """ LCM Type: int32_t """
        self.name = ""
        """ LCM Type: string """
        self.values = []
        """ LCM Type: float[values_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(ChannelFloat32._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.values_length))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>%df' % self.values_length, *self.values[:self.values_length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ChannelFloat32._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ChannelFloat32._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ChannelFloat32()
        self.values_length = struct.unpack(">i", buf.read(4))[0]
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.values = struct.unpack('>%df' % self.values_length, buf.read(self.values_length * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ChannelFloat32 in parents: return 0
        tmphash = (0x8cbe448953ebf073) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ChannelFloat32._packed_fingerprint is None:
            ChannelFloat32._packed_fingerprint = struct.pack(">Q", ChannelFloat32._get_hash_recursive([]))
        return ChannelFloat32._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ChannelFloat32._get_packed_fingerprint())[0]

