"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class TF2Error(object):

    __slots__ = ["error", "error_string"]

    __typenames__ = ["byte", "string"]

    __dimensions__ = [None, None]

    NO_ERROR = 0
    LOOKUP_ERROR = 1
    CONNECTIVITY_ERROR = 2
    EXTRAPOLATION_ERROR = 3
    INVALID_ARGUMENT_ERROR = 4
    TIMEOUT_ERROR = 5
    TRANSFORM_ERROR = 6

    def __init__(self):
        self.error = 0
        """ LCM Type: byte """
        self.error_string = ""
        """ LCM Type: string """

    def encode(self):
        buf = BytesIO()
        buf.write(TF2Error._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">B", self.error))
        __error_string_encoded = self.error_string.encode('utf-8')
        buf.write(struct.pack('>I', len(__error_string_encoded)+1))
        buf.write(__error_string_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TF2Error._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TF2Error._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = TF2Error()
        self.error = struct.unpack(">B", buf.read(1))[0]
        __error_string_len = struct.unpack('>I', buf.read(4))[0]
        self.error_string = buf.read(__error_string_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if TF2Error in parents: return 0
        tmphash = (0x1e8ff0d80d02ee55) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if TF2Error._packed_fingerprint is None:
            TF2Error._packed_fingerprint = struct.pack(">Q", TF2Error._get_hash_recursive([]))
        return TF2Error._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TF2Error._get_packed_fingerprint())[0]

