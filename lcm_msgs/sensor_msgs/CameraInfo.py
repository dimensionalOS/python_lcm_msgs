"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import std_msgs
from . import *
from .RegionOfInterest import RegionOfInterest
class CameraInfo(object):

    __slots__ = ["D_length", "header", "height", "width", "distortion_model", "D", "K", "R", "P", "binning_x", "binning_y", "roi"]

    __typenames__ = ["int32_t", "std_msgs.Header", "int32_t", "int32_t", "string", "double", "double", "double", "double", "int32_t", "int32_t", "RegionOfInterest"]

    __dimensions__ = [None, None, None, None, None, ["D_length"], [9], [9], [12], None, None, None]

    def __init__(self):
        self.D_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.height = 0
        """ LCM Type: int32_t """
        self.width = 0
        """ LCM Type: int32_t """
        self.distortion_model = ""
        """ LCM Type: string """
        self.D = []
        """ LCM Type: double[D_length] """
        self.K = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """
        self.R = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """
        self.P = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: double[12] """
        self.binning_x = 0
        """ LCM Type: int32_t """
        self.binning_y = 0
        """ LCM Type: int32_t """
        self.roi = RegionOfInterest()
        """ LCM Type: RegionOfInterest """

    def encode(self):
        buf = BytesIO()
        buf.write(CameraInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.D_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ii", self.height, self.width))
        __distortion_model_encoded = self.distortion_model.encode('utf-8')
        buf.write(struct.pack('>I', len(__distortion_model_encoded)+1))
        buf.write(__distortion_model_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.D_length, *self.D[:self.D_length]))
        buf.write(struct.pack('>9d', *self.K[:9]))
        buf.write(struct.pack('>9d', *self.R[:9]))
        buf.write(struct.pack('>12d', *self.P[:12]))
        buf.write(struct.pack(">ii", self.binning_x, self.binning_y))
        assert self.roi._get_packed_fingerprint() == RegionOfInterest._get_packed_fingerprint()
        self.roi._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CameraInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CameraInfo._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = CameraInfo()
        self.D_length = struct.unpack(">i", buf.read(4))[0]
        self.header = std_msgs.Header._decode_one(buf)
        self.height, self.width = struct.unpack(">ii", buf.read(8))
        __distortion_model_len = struct.unpack('>I', buf.read(4))[0]
        self.distortion_model = buf.read(__distortion_model_len)[:-1].decode('utf-8', 'replace')
        self.D = struct.unpack('>%dd' % self.D_length, buf.read(self.D_length * 8))
        self.K = struct.unpack('>9d', buf.read(72))
        self.R = struct.unpack('>9d', buf.read(72))
        self.P = struct.unpack('>12d', buf.read(96))
        self.binning_x, self.binning_y = struct.unpack(">ii", buf.read(8))
        self.roi = RegionOfInterest._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if CameraInfo in parents: return 0
        newparents = parents + [CameraInfo]
        tmphash = (0xb4ea6258bc6d0702+ std_msgs.Header._get_hash_recursive(newparents)+ RegionOfInterest._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if CameraInfo._packed_fingerprint is None:
            CameraInfo._packed_fingerprint = struct.pack(">Q", CameraInfo._get_hash_recursive([]))
        return CameraInfo._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", CameraInfo._get_packed_fingerprint())[0]

