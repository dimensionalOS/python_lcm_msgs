"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from . import *
from .Color import Color
class ArrowPrimitive(object):

    __slots__ = ["pose", "shaft_length", "shaft_diameter", "head_length", "head_diameter", "color"]

    __typenames__ = ["geometry_msgs.Pose", "double", "double", "double", "double", "Color"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.shaft_length = 0.0
        """ LCM Type: double """
        self.shaft_diameter = 0.0
        """ LCM Type: double """
        self.head_length = 0.0
        """ LCM Type: double """
        self.head_diameter = 0.0
        """ LCM Type: double """
        self.color = Color()
        """ LCM Type: Color """

    def encode(self):
        buf = BytesIO()
        buf.write(ArrowPrimitive._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        buf.write(struct.pack(">dddd", self.shaft_length, self.shaft_diameter, self.head_length, self.head_diameter))
        assert self.color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.color._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ArrowPrimitive._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ArrowPrimitive._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ArrowPrimitive()
        self.pose = geometry_msgs.Pose._decode_one(buf)
        self.shaft_length, self.shaft_diameter, self.head_length, self.head_diameter = struct.unpack(">dddd", buf.read(32))
        self.color = Color._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ArrowPrimitive in parents: return 0
        newparents = parents + [ArrowPrimitive]
        tmphash = (0xb1f9d32968e60fbb+ geometry_msgs.Pose._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ArrowPrimitive._packed_fingerprint is None:
            ArrowPrimitive._packed_fingerprint = struct.pack(">Q", ArrowPrimitive._get_hash_recursive([]))
        return ArrowPrimitive._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ArrowPrimitive._get_packed_fingerprint())[0]

