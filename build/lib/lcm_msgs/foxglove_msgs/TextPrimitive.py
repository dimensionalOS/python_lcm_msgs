"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from . import *
from .Color import Color
class TextPrimitive(object):

    __slots__ = ["pose", "billboard", "font_size", "scale_invariant", "color", "text"]

    __typenames__ = ["geometry_msgs.Pose", "boolean", "double", "boolean", "Color", "string"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.billboard = False
        """ LCM Type: boolean """
        self.font_size = 0.0
        """ LCM Type: double """
        self.scale_invariant = False
        """ LCM Type: boolean """
        self.color = Color()
        """ LCM Type: Color """
        self.text = ""
        """ LCM Type: string """

    def encode(self):
        buf = BytesIO()
        buf.write(TextPrimitive._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        buf.write(struct.pack(">bdb", self.billboard, self.font_size, self.scale_invariant))
        assert self.color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.color._encode_one(buf)
        __text_encoded = self.text.encode('utf-8')
        buf.write(struct.pack('>I', len(__text_encoded)+1))
        buf.write(__text_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TextPrimitive._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TextPrimitive._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = TextPrimitive()
        self.pose = geometry_msgs.Pose._decode_one(buf)
        self.billboard = bool(struct.unpack('b', buf.read(1))[0])
        self.font_size = struct.unpack(">d", buf.read(8))[0]
        self.scale_invariant = bool(struct.unpack('b', buf.read(1))[0])
        self.color = Color._decode_one(buf)
        __text_len = struct.unpack('>I', buf.read(4))[0]
        self.text = buf.read(__text_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if TextPrimitive in parents: return 0
        newparents = parents + [TextPrimitive]
        tmphash = (0x3a761dcf4ac0e7c2+ geometry_msgs.Pose._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if TextPrimitive._packed_fingerprint is None:
            TextPrimitive._packed_fingerprint = struct.pack(">Q", TextPrimitive._get_hash_recursive([]))
        return TextPrimitive._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TextPrimitive._get_packed_fingerprint())[0]

