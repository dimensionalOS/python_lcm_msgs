"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from lcm_msgs import std_msgs
from .Inertia import Inertia
class InertiaStamped(object):

    __slots__ = ["header", "inertia"]

    __typenames__ = ["std_msgs.Header", "Inertia"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.inertia = Inertia()
        """ LCM Type: Inertia """

    def encode(self):
        buf = BytesIO()
        buf.write(InertiaStamped._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.inertia._get_packed_fingerprint() == Inertia._get_packed_fingerprint()
        self.inertia._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != InertiaStamped._get_packed_fingerprint():
            raise ValueError("Decode error")
        return InertiaStamped._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = InertiaStamped()
        self.header = std_msgs.Header._decode_one(buf)
        self.inertia = Inertia._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if InertiaStamped in parents: return 0
        newparents = parents + [InertiaStamped]
        tmphash = (0x3a39287c292abed7+ std_msgs.Header._get_hash_recursive(newparents)+ Inertia._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if InertiaStamped._packed_fingerprint is None:
            InertiaStamped._packed_fingerprint = struct.pack(">Q", InertiaStamped._get_hash_recursive([]))
        return InertiaStamped._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", InertiaStamped._get_packed_fingerprint())[0]

