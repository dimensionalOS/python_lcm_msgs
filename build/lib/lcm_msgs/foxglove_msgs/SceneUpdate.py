"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from .SceneEntity import SceneEntity
from .SceneEntityDeletion import SceneEntityDeletion
class SceneUpdate(object):

    __slots__ = ["deletions_length", "entities_length", "deletions", "entities"]

    __typenames__ = ["int32_t", "int32_t", "SceneEntityDeletion", "SceneEntity"]

    __dimensions__ = [None, None, ["deletions_length"], ["entities_length"]]

    def __init__(self):
        self.deletions_length = 0
        """ LCM Type: int32_t """
        self.entities_length = 0
        """ LCM Type: int32_t """
        self.deletions = []
        """ LCM Type: SceneEntityDeletion[deletions_length] """
        self.entities = []
        """ LCM Type: SceneEntity[entities_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(SceneUpdate._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.deletions_length, self.entities_length))
        for i0 in range(self.deletions_length):
            assert self.deletions[i0]._get_packed_fingerprint() == SceneEntityDeletion._get_packed_fingerprint()
            self.deletions[i0]._encode_one(buf)
        for i0 in range(self.entities_length):
            assert self.entities[i0]._get_packed_fingerprint() == SceneEntity._get_packed_fingerprint()
            self.entities[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SceneUpdate._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SceneUpdate._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = SceneUpdate()
        self.deletions_length, self.entities_length = struct.unpack(">ii", buf.read(8))
        self.deletions = []
        for i0 in range(self.deletions_length):
            self.deletions.append(SceneEntityDeletion._decode_one(buf))
        self.entities = []
        for i0 in range(self.entities_length):
            self.entities.append(SceneEntity._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if SceneUpdate in parents: return 0
        newparents = parents + [SceneUpdate]
        tmphash = (0x8f9d4ee9e2a92d31+ SceneEntityDeletion._get_hash_recursive(newparents)+ SceneEntity._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if SceneUpdate._packed_fingerprint is None:
            SceneUpdate._packed_fingerprint = struct.pack(">Q", SceneUpdate._get_hash_recursive([]))
        return SceneUpdate._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SceneUpdate._get_packed_fingerprint())[0]

