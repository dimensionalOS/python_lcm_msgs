"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import std_msgs
from . import *
from .PointField import PointField
class PointCloud2(object):

    __slots__ = ["fields_length", "data_length", "header", "height", "width", "fields", "is_bigendian", "point_step", "row_step", "data", "is_dense"]

    __typenames__ = ["int32_t", "int32_t", "std_msgs.Header", "int32_t", "int32_t", "PointField", "boolean", "int32_t", "int32_t", "byte", "boolean"]

    __dimensions__ = [None, None, None, None, None, ["fields_length"], None, None, None, ["data_length"], None]

    def __init__(self):
        self.fields_length = 0
        """ LCM Type: int32_t """
        self.data_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.height = 0
        """ LCM Type: int32_t """
        self.width = 0
        """ LCM Type: int32_t """
        self.fields = []
        """ LCM Type: PointField[fields_length] """
        self.is_bigendian = False
        """ LCM Type: boolean """
        self.point_step = 0
        """ LCM Type: int32_t """
        self.row_step = 0
        """ LCM Type: int32_t """
        self.data = b""
        """ LCM Type: byte[data_length] """
        self.is_dense = False
        """ LCM Type: boolean """

    def encode(self):
        buf = BytesIO()
        buf.write(PointCloud2._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.fields_length, self.data_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ii", self.height, self.width))
        for i0 in range(self.fields_length):
            assert self.fields[i0]._get_packed_fingerprint() == PointField._get_packed_fingerprint()
            self.fields[i0]._encode_one(buf)
        buf.write(struct.pack(">bii", self.is_bigendian, self.point_step, self.row_step))
        buf.write(bytearray(self.data[:self.data_length]))
        buf.write(struct.pack(">b", self.is_dense))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PointCloud2._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PointCloud2._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = PointCloud2()
        self.fields_length, self.data_length = struct.unpack(">ii", buf.read(8))
        self.header = std_msgs.Header._decode_one(buf)
        self.height, self.width = struct.unpack(">ii", buf.read(8))
        self.fields = []
        for i0 in range(self.fields_length):
            self.fields.append(PointField._decode_one(buf))
        self.is_bigendian = bool(struct.unpack('b', buf.read(1))[0])
        self.point_step, self.row_step = struct.unpack(">ii", buf.read(8))
        self.data = buf.read(self.data_length)
        self.is_dense = bool(struct.unpack('b', buf.read(1))[0])
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if PointCloud2 in parents: return 0
        newparents = parents + [PointCloud2]
        tmphash = (0xeabe7183c4d74215+ std_msgs.Header._get_hash_recursive(newparents)+ PointField._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if PointCloud2._packed_fingerprint is None:
            PointCloud2._packed_fingerprint = struct.pack(">Q", PointCloud2._get_hash_recursive([]))
        return PointCloud2._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PointCloud2._get_packed_fingerprint())[0]

