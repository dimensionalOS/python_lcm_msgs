"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class InteractiveMarkerFeedback(object):

    __slots__ = ["header", "client_id", "marker_name", "control_name", "event_type", "pose", "menu_entry_id", "mouse_point", "mouse_point_valid"]

    __typenames__ = ["std_msgs.Header", "string", "string", "string", "byte", "geometry_msgs.Pose", "int32_t", "geometry_msgs.Point", "boolean"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    KEEP_ALIVE = 0
    POSE_UPDATE = 1
    MENU_SELECT = 2
    BUTTON_CLICK = 3
    MOUSE_DOWN = 4
    MOUSE_UP = 5

    def __init__(self):
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.client_id = ""
        """ LCM Type: string """
        self.marker_name = ""
        """ LCM Type: string """
        self.control_name = ""
        """ LCM Type: string """
        self.event_type = 0
        """ LCM Type: byte """
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.menu_entry_id = 0
        """ LCM Type: int32_t """
        self.mouse_point = geometry_msgs.Point()
        """ LCM Type: geometry_msgs.Point """
        self.mouse_point_valid = False
        """ LCM Type: boolean """

    def encode(self):
        buf = BytesIO()
        buf.write(InteractiveMarkerFeedback._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        __client_id_encoded = self.client_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__client_id_encoded)+1))
        buf.write(__client_id_encoded)
        buf.write(b"\0")
        __marker_name_encoded = self.marker_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__marker_name_encoded)+1))
        buf.write(__marker_name_encoded)
        buf.write(b"\0")
        __control_name_encoded = self.control_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__control_name_encoded)+1))
        buf.write(__control_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">B", self.event_type))
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        buf.write(struct.pack(">i", self.menu_entry_id))
        assert self.mouse_point._get_packed_fingerprint() == geometry_msgs.Point._get_packed_fingerprint()
        self.mouse_point._encode_one(buf)
        buf.write(struct.pack(">b", self.mouse_point_valid))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != InteractiveMarkerFeedback._get_packed_fingerprint():
            raise ValueError("Decode error")
        return InteractiveMarkerFeedback._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = InteractiveMarkerFeedback()
        self.header = std_msgs.Header._decode_one(buf)
        __client_id_len = struct.unpack('>I', buf.read(4))[0]
        self.client_id = buf.read(__client_id_len)[:-1].decode('utf-8', 'replace')
        __marker_name_len = struct.unpack('>I', buf.read(4))[0]
        self.marker_name = buf.read(__marker_name_len)[:-1].decode('utf-8', 'replace')
        __control_name_len = struct.unpack('>I', buf.read(4))[0]
        self.control_name = buf.read(__control_name_len)[:-1].decode('utf-8', 'replace')
        self.event_type = struct.unpack(">B", buf.read(1))[0]
        self.pose = geometry_msgs.Pose._decode_one(buf)
        self.menu_entry_id = struct.unpack(">i", buf.read(4))[0]
        self.mouse_point = geometry_msgs.Point._decode_one(buf)
        self.mouse_point_valid = bool(struct.unpack('b', buf.read(1))[0])
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if InteractiveMarkerFeedback in parents: return 0
        newparents = parents + [InteractiveMarkerFeedback]
        tmphash = (0xd44e20643fb0d4f7+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Pose._get_hash_recursive(newparents)+ geometry_msgs.Point._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if InteractiveMarkerFeedback._packed_fingerprint is None:
            InteractiveMarkerFeedback._packed_fingerprint = struct.pack(">Q", InteractiveMarkerFeedback._get_hash_recursive([]))
        return InteractiveMarkerFeedback._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", InteractiveMarkerFeedback._get_packed_fingerprint())[0]

