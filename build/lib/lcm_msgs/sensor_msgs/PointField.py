"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class PointField(object):

    __slots__ = ["name", "offset", "datatype", "count"]

    __typenames__ = ["string", "int32_t", "byte", "int32_t"]

    __dimensions__ = [None, None, None, None]

    INT8 = 1
    UINT8 = 2
    INT16 = 3
    UINT16 = 4
    INT32 = 5
    UINT32 = 6
    FLOAT32 = 7
    FLOAT64 = 8

    def __init__(self):
        self.name = ""
        """ LCM Type: string """
        self.offset = 0
        """ LCM Type: int32_t """
        self.datatype = 0
        """ LCM Type: byte """
        self.count = 0
        """ LCM Type: int32_t """

    def encode(self):
        buf = BytesIO()
        buf.write(PointField._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iBi", self.offset, self.datatype, self.count))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PointField._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PointField._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = PointField()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.offset, self.datatype, self.count = struct.unpack(">iBi", buf.read(9))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if PointField in parents: return 0
        tmphash = (0x702e0e03f04285d7) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if PointField._packed_fingerprint is None:
            PointField._packed_fingerprint = struct.pack(">Q", PointField._get_hash_recursive([]))
        return PointField._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PointField._get_packed_fingerprint())[0]

