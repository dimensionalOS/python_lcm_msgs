"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class MapMetaData(object):

    __slots__ = ["map_load_time", "resolution", "width", "height", "origin"]

    __typenames__ = ["std_msgs.Time", "float", "int32_t", "int32_t", "geometry_msgs.Pose"]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self):
        self.map_load_time = std_msgs.Time()
        """ LCM Type: std_msgs.Time """
        self.resolution = 0.0
        """ LCM Type: float """
        self.width = 0
        """ LCM Type: int32_t """
        self.height = 0
        """ LCM Type: int32_t """
        self.origin = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """

    def encode(self):
        buf = BytesIO()
        buf.write(MapMetaData._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.map_load_time._get_packed_fingerprint() == std_msgs.Time._get_packed_fingerprint()
        self.map_load_time._encode_one(buf)
        buf.write(struct.pack(">fii", self.resolution, self.width, self.height))
        assert self.origin._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.origin._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != MapMetaData._get_packed_fingerprint():
            raise ValueError("Decode error")
        return MapMetaData._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = MapMetaData()
        self.map_load_time = std_msgs.Time._decode_one(buf)
        self.resolution, self.width, self.height = struct.unpack(">fii", buf.read(12))
        self.origin = geometry_msgs.Pose._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if MapMetaData in parents: return 0
        newparents = parents + [MapMetaData]
        tmphash = (0x3245f3cdb468ba93+ std_msgs.Time._get_hash_recursive(newparents)+ geometry_msgs.Pose._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if MapMetaData._packed_fingerprint is None:
            MapMetaData._packed_fingerprint = struct.pack(">Q", MapMetaData._get_hash_recursive([]))
        return MapMetaData._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", MapMetaData._get_packed_fingerprint())[0]

