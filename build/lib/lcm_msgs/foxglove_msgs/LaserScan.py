"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import builtin_interfaces
class LaserScan(object):

    __slots__ = ["ranges_length", "intensities_length", "timestamp", "frame_id", "pose", "start_angle", "end_angle", "ranges", "intensities"]

    __typenames__ = ["int32_t", "int32_t", "builtin_interfaces.Time", "string", "geometry_msgs.Pose", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, ["ranges_length"], ["intensities_length"]]

    def __init__(self):
        self.ranges_length = 0
        """ LCM Type: int32_t """
        self.intensities_length = 0
        """ LCM Type: int32_t """
        self.timestamp = builtin_interfaces.Time()
        """ LCM Type: builtin_interfaces.Time """
        self.frame_id = ""
        """ LCM Type: string """
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.start_angle = 0.0
        """ LCM Type: double """
        self.end_angle = 0.0
        """ LCM Type: double """
        self.ranges = []
        """ LCM Type: double[ranges_length] """
        self.intensities = []
        """ LCM Type: double[intensities_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(LaserScan._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.ranges_length, self.intensities_length))
        assert self.timestamp._get_packed_fingerprint() == builtin_interfaces.Time._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        __frame_id_encoded = self.frame_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_id_encoded)+1))
        buf.write(__frame_id_encoded)
        buf.write(b"\0")
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        buf.write(struct.pack(">dd", self.start_angle, self.end_angle))
        buf.write(struct.pack('>%dd' % self.ranges_length, *self.ranges[:self.ranges_length]))
        buf.write(struct.pack('>%dd' % self.intensities_length, *self.intensities[:self.intensities_length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LaserScan._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LaserScan._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = LaserScan()
        self.ranges_length, self.intensities_length = struct.unpack(">ii", buf.read(8))
        self.timestamp = builtin_interfaces.Time._decode_one(buf)
        __frame_id_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_id = buf.read(__frame_id_len)[:-1].decode('utf-8', 'replace')
        self.pose = geometry_msgs.Pose._decode_one(buf)
        self.start_angle, self.end_angle = struct.unpack(">dd", buf.read(16))
        self.ranges = struct.unpack('>%dd' % self.ranges_length, buf.read(self.ranges_length * 8))
        self.intensities = struct.unpack('>%dd' % self.intensities_length, buf.read(self.intensities_length * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if LaserScan in parents: return 0
        newparents = parents + [LaserScan]
        tmphash = (0x22e7c769ba6a90c2+ builtin_interfaces.Time._get_hash_recursive(newparents)+ geometry_msgs.Pose._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if LaserScan._packed_fingerprint is None:
            LaserScan._packed_fingerprint = struct.pack(">Q", LaserScan._get_hash_recursive([]))
        return LaserScan._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", LaserScan._get_packed_fingerprint())[0]

