"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from . import *
from .Color import Color
class TriangleListPrimitive(object):

    __slots__ = ["points_length", "colors_length", "indices_length", "pose", "points", "color", "colors", "indices"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "geometry_msgs.Pose", "geometry_msgs.Point", "Color", "Color", "int32_t"]

    __dimensions__ = [None, None, None, None, ["points_length"], None, ["colors_length"], ["indices_length"]]

    def __init__(self):
        self.points_length = 0
        """ LCM Type: int32_t """
        self.colors_length = 0
        """ LCM Type: int32_t """
        self.indices_length = 0
        """ LCM Type: int32_t """
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.points = []
        """ LCM Type: geometry_msgs.Point[points_length] """
        self.color = Color()
        """ LCM Type: Color """
        self.colors = []
        """ LCM Type: Color[colors_length] """
        self.indices = []
        """ LCM Type: int32_t[indices_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(TriangleListPrimitive._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iii", self.points_length, self.colors_length, self.indices_length))
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        for i0 in range(self.points_length):
            assert self.points[i0]._get_packed_fingerprint() == geometry_msgs.Point._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        assert self.color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.color._encode_one(buf)
        for i0 in range(self.colors_length):
            assert self.colors[i0]._get_packed_fingerprint() == Color._get_packed_fingerprint()
            self.colors[i0]._encode_one(buf)
        buf.write(struct.pack('>%di' % self.indices_length, *self.indices[:self.indices_length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TriangleListPrimitive._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TriangleListPrimitive._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = TriangleListPrimitive()
        self.points_length, self.colors_length, self.indices_length = struct.unpack(">iii", buf.read(12))
        self.pose = geometry_msgs.Pose._decode_one(buf)
        self.points = []
        for i0 in range(self.points_length):
            self.points.append(geometry_msgs.Point._decode_one(buf))
        self.color = Color._decode_one(buf)
        self.colors = []
        for i0 in range(self.colors_length):
            self.colors.append(Color._decode_one(buf))
        self.indices = struct.unpack('>%di' % self.indices_length, buf.read(self.indices_length * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if TriangleListPrimitive in parents: return 0
        newparents = parents + [TriangleListPrimitive]
        tmphash = (0xcf3047947917a6cc+ geometry_msgs.Pose._get_hash_recursive(newparents)+ geometry_msgs.Point._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if TriangleListPrimitive._packed_fingerprint is None:
            TriangleListPrimitive._packed_fingerprint = struct.pack(">Q", TriangleListPrimitive._get_hash_recursive([]))
        return TriangleListPrimitive._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TriangleListPrimitive._get_packed_fingerprint())[0]

