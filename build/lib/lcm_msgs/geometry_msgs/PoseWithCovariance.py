"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from .Pose import Pose
class PoseWithCovariance(object):

    __slots__ = ["pose", "covariance"]

    __typenames__ = ["Pose", "double"]

    __dimensions__ = [None, [36]]

    def __init__(self):
        self.pose = Pose()
        """ LCM Type: Pose """
        self.covariance = [ 0.0 for dim0 in range(36) ]
        """ LCM Type: double[36] """

    def encode(self):
        buf = BytesIO()
        buf.write(PoseWithCovariance._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.pose._get_packed_fingerprint() == Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        buf.write(struct.pack('>36d', *self.covariance[:36]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PoseWithCovariance._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PoseWithCovariance._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = PoseWithCovariance()
        self.pose = Pose._decode_one(buf)
        self.covariance = struct.unpack('>36d', buf.read(288))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if PoseWithCovariance in parents: return 0
        newparents = parents + [PoseWithCovariance]
        tmphash = (0x42dbdfaa69371237+ Pose._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if PoseWithCovariance._packed_fingerprint is None:
            PoseWithCovariance._packed_fingerprint = struct.pack(">Q", PoseWithCovariance._get_hash_recursive([]))
        return PoseWithCovariance._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PoseWithCovariance._get_packed_fingerprint())[0]

