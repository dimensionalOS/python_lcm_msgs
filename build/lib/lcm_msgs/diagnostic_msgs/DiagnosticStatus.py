"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from .KeyValue import KeyValue
class DiagnosticStatus(object):

    __slots__ = ["values_length", "level", "name", "message", "hardware_id", "values"]

    __typenames__ = ["int32_t", "int8_t", "string", "string", "string", "KeyValue"]

    __dimensions__ = [None, None, None, None, None, ["values_length"]]

    OK = 0
    WARN = 1
    ERROR = 2
    STALE = 3

    def __init__(self):
        self.values_length = 0
        """ LCM Type: int32_t """
        self.level = 0
        """ LCM Type: int8_t """
        self.name = ""
        """ LCM Type: string """
        self.message = ""
        """ LCM Type: string """
        self.hardware_id = ""
        """ LCM Type: string """
        self.values = []
        """ LCM Type: KeyValue[values_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(DiagnosticStatus._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ib", self.values_length, self.level))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        __message_encoded = self.message.encode('utf-8')
        buf.write(struct.pack('>I', len(__message_encoded)+1))
        buf.write(__message_encoded)
        buf.write(b"\0")
        __hardware_id_encoded = self.hardware_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__hardware_id_encoded)+1))
        buf.write(__hardware_id_encoded)
        buf.write(b"\0")
        for i0 in range(self.values_length):
            assert self.values[i0]._get_packed_fingerprint() == KeyValue._get_packed_fingerprint()
            self.values[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != DiagnosticStatus._get_packed_fingerprint():
            raise ValueError("Decode error")
        return DiagnosticStatus._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = DiagnosticStatus()
        self.values_length, self.level = struct.unpack(">ib", buf.read(5))
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        __message_len = struct.unpack('>I', buf.read(4))[0]
        self.message = buf.read(__message_len)[:-1].decode('utf-8', 'replace')
        __hardware_id_len = struct.unpack('>I', buf.read(4))[0]
        self.hardware_id = buf.read(__hardware_id_len)[:-1].decode('utf-8', 'replace')
        self.values = []
        for i0 in range(self.values_length):
            self.values.append(KeyValue._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if DiagnosticStatus in parents: return 0
        newparents = parents + [DiagnosticStatus]
        tmphash = (0x3e3fb00c69778dfb+ KeyValue._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if DiagnosticStatus._packed_fingerprint is None:
            DiagnosticStatus._packed_fingerprint = struct.pack(">Q", DiagnosticStatus._get_hash_recursive([]))
        return DiagnosticStatus._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", DiagnosticStatus._get_packed_fingerprint())[0]

