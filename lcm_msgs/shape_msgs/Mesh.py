"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from lcm_msgs import geometry_msgs
from .MeshTriangle import MeshTriangle
class Mesh(object):

    __slots__ = ["triangles_length", "vertices_length", "triangles", "vertices"]

    __typenames__ = ["int32_t", "int32_t", "MeshTriangle", "geometry_msgs.Point"]

    __dimensions__ = [None, None, ["triangles_length"], ["vertices_length"]]

    def __init__(self):
        self.triangles_length = 0
        """ LCM Type: int32_t """
        self.vertices_length = 0
        """ LCM Type: int32_t """
        self.triangles = []
        """ LCM Type: MeshTriangle[triangles_length] """
        self.vertices = []
        """ LCM Type: geometry_msgs.Point[vertices_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(Mesh._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.triangles_length, self.vertices_length))
        for i0 in range(self.triangles_length):
            assert self.triangles[i0]._get_packed_fingerprint() == MeshTriangle._get_packed_fingerprint()
            self.triangles[i0]._encode_one(buf)
        for i0 in range(self.vertices_length):
            assert self.vertices[i0]._get_packed_fingerprint() == geometry_msgs.Point._get_packed_fingerprint()
            self.vertices[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Mesh._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Mesh._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Mesh()
        self.triangles_length, self.vertices_length = struct.unpack(">ii", buf.read(8))
        self.triangles = []
        for i0 in range(self.triangles_length):
            self.triangles.append(MeshTriangle._decode_one(buf))
        self.vertices = []
        for i0 in range(self.vertices_length):
            self.vertices.append(geometry_msgs.Point._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Mesh in parents: return 0
        newparents = parents + [Mesh]
        tmphash = (0xdc739fb8d2f81ab9+ MeshTriangle._get_hash_recursive(newparents)+ geometry_msgs.Point._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Mesh._packed_fingerprint is None:
            Mesh._packed_fingerprint = struct.pack(">Q", Mesh._get_hash_recursive([]))
        return Mesh._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Mesh._get_packed_fingerprint())[0]

