"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import std_msgs
from . import *
from .NavSatStatus import NavSatStatus
class NavSatFix(object):

    __slots__ = ["header", "status", "latitude", "longitude", "altitude", "position_covariance", "position_covariance_type"]

    __typenames__ = ["std_msgs.Header", "NavSatStatus", "double", "double", "double", "double", "byte"]

    __dimensions__ = [None, None, None, None, None, [9], None]

    COVARIANCE_TYPE_UNKNOWN = 0
    COVARIANCE_TYPE_APPROXIMATED = 1
    COVARIANCE_TYPE_DIAGONAL_KNOWN = 2
    COVARIANCE_TYPE_KNOWN = 3

    def __init__(self):
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.status = NavSatStatus()
        """ LCM Type: NavSatStatus """
        self.latitude = 0.0
        """ LCM Type: double """
        self.longitude = 0.0
        """ LCM Type: double """
        self.altitude = 0.0
        """ LCM Type: double """
        self.position_covariance = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """
        self.position_covariance_type = 0
        """ LCM Type: byte """

    def encode(self):
        buf = BytesIO()
        buf.write(NavSatFix._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.status._get_packed_fingerprint() == NavSatStatus._get_packed_fingerprint()
        self.status._encode_one(buf)
        buf.write(struct.pack(">ddd", self.latitude, self.longitude, self.altitude))
        buf.write(struct.pack('>9d', *self.position_covariance[:9]))
        buf.write(struct.pack(">B", self.position_covariance_type))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != NavSatFix._get_packed_fingerprint():
            raise ValueError("Decode error")
        return NavSatFix._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = NavSatFix()
        self.header = std_msgs.Header._decode_one(buf)
        self.status = NavSatStatus._decode_one(buf)
        self.latitude, self.longitude, self.altitude = struct.unpack(">ddd", buf.read(24))
        self.position_covariance = struct.unpack('>9d', buf.read(72))
        self.position_covariance_type = struct.unpack(">B", buf.read(1))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if NavSatFix in parents: return 0
        newparents = parents + [NavSatFix]
        tmphash = (0x4a84d20526d9067a+ std_msgs.Header._get_hash_recursive(newparents)+ NavSatStatus._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if NavSatFix._packed_fingerprint is None:
            NavSatFix._packed_fingerprint = struct.pack(">Q", NavSatFix._get_hash_recursive([]))
        return NavSatFix._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", NavSatFix._get_packed_fingerprint())[0]

