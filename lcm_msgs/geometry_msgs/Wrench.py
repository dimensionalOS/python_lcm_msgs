"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from .Vector3 import Vector3
class Wrench(object):

    __slots__ = ["force", "torque"]

    __typenames__ = ["Vector3", "Vector3"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.force = Vector3()
        """ LCM Type: Vector3 """
        self.torque = Vector3()
        """ LCM Type: Vector3 """

    def encode(self):
        buf = BytesIO()
        buf.write(Wrench._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.force._get_packed_fingerprint() == Vector3._get_packed_fingerprint()
        self.force._encode_one(buf)
        assert self.torque._get_packed_fingerprint() == Vector3._get_packed_fingerprint()
        self.torque._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Wrench._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Wrench._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Wrench()
        self.force = Vector3._decode_one(buf)
        self.torque = Vector3._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Wrench in parents: return 0
        newparents = parents + [Wrench]
        tmphash = (0x980c3aea984c9a6+ Vector3._get_hash_recursive(newparents)+ Vector3._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Wrench._packed_fingerprint is None:
            Wrench._packed_fingerprint = struct.pack(">Q", Wrench._get_hash_recursive([]))
        return Wrench._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Wrench._get_packed_fingerprint())[0]

