"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class Vector2(object):

    __slots__ = ["x", "y"]

    __typenames__ = ["double", "double"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.x = 0.0
        """ LCM Type: double """
        self.y = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(Vector2._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dd", self.x, self.y))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Vector2._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Vector2._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Vector2()
        self.x, self.y = struct.unpack(">dd", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Vector2 in parents: return 0
        tmphash = (0xd259512e30b44885) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Vector2._packed_fingerprint is None:
            Vector2._packed_fingerprint = struct.pack(">Q", Vector2._get_hash_recursive([]))
        return Vector2._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Vector2._get_packed_fingerprint())[0]

