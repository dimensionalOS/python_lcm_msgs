"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import builtin_interfaces
class RawImage(object):

    __slots__ = ["data_length", "timestamp", "frame_id", "width", "height", "encoding", "step", "data"]

    __typenames__ = ["int32_t", "builtin_interfaces.Time", "string", "int32_t", "int32_t", "string", "int32_t", "byte"]

    __dimensions__ = [None, None, None, None, None, None, None, ["data_length"]]

    def __init__(self):
        self.data_length = 0
        """ LCM Type: int32_t """
        self.timestamp = builtin_interfaces.Time()
        """ LCM Type: builtin_interfaces.Time """
        self.frame_id = ""
        """ LCM Type: string """
        self.width = 0
        """ LCM Type: int32_t """
        self.height = 0
        """ LCM Type: int32_t """
        self.encoding = ""
        """ LCM Type: string """
        self.step = 0
        """ LCM Type: int32_t """
        self.data = b""
        """ LCM Type: byte[data_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(RawImage._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.data_length))
        assert self.timestamp._get_packed_fingerprint() == builtin_interfaces.Time._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        __frame_id_encoded = self.frame_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_id_encoded)+1))
        buf.write(__frame_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ii", self.width, self.height))
        __encoding_encoded = self.encoding.encode('utf-8')
        buf.write(struct.pack('>I', len(__encoding_encoded)+1))
        buf.write(__encoding_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.step))
        buf.write(bytearray(self.data[:self.data_length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RawImage._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RawImage._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = RawImage()
        self.data_length = struct.unpack(">i", buf.read(4))[0]
        self.timestamp = builtin_interfaces.Time._decode_one(buf)
        __frame_id_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_id = buf.read(__frame_id_len)[:-1].decode('utf-8', 'replace')
        self.width, self.height = struct.unpack(">ii", buf.read(8))
        __encoding_len = struct.unpack('>I', buf.read(4))[0]
        self.encoding = buf.read(__encoding_len)[:-1].decode('utf-8', 'replace')
        self.step = struct.unpack(">i", buf.read(4))[0]
        self.data = buf.read(self.data_length)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if RawImage in parents: return 0
        newparents = parents + [RawImage]
        tmphash = (0x8dc0da8aa491bb39+ builtin_interfaces.Time._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if RawImage._packed_fingerprint is None:
            RawImage._packed_fingerprint = struct.pack(">Q", RawImage._get_hash_recursive([]))
        return RawImage._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RawImage._get_packed_fingerprint())[0]

