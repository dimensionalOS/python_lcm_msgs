"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class MultiDOFJointState(object):

    __slots__ = ["joint_names_length", "transforms_length", "twist_length", "wrench_length", "header", "joint_names", "transforms", "twist", "wrench"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "std_msgs.Header", "string", "geometry_msgs.Transform", "geometry_msgs.Twist", "geometry_msgs.Wrench"]

    __dimensions__ = [None, None, None, None, None, ["joint_names_length"], ["transforms_length"], ["twist_length"], ["wrench_length"]]

    def __init__(self):
        self.joint_names_length = 0
        """ LCM Type: int32_t """
        self.transforms_length = 0
        """ LCM Type: int32_t """
        self.twist_length = 0
        """ LCM Type: int32_t """
        self.wrench_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.joint_names = []
        """ LCM Type: string[joint_names_length] """
        self.transforms = []
        """ LCM Type: geometry_msgs.Transform[transforms_length] """
        self.twist = []
        """ LCM Type: geometry_msgs.Twist[twist_length] """
        self.wrench = []
        """ LCM Type: geometry_msgs.Wrench[wrench_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(MultiDOFJointState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.joint_names_length, self.transforms_length, self.twist_length, self.wrench_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        for i0 in range(self.joint_names_length):
            __joint_names_encoded = self.joint_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__joint_names_encoded)+1))
            buf.write(__joint_names_encoded)
            buf.write(b"\0")
        for i0 in range(self.transforms_length):
            assert self.transforms[i0]._get_packed_fingerprint() == geometry_msgs.Transform._get_packed_fingerprint()
            self.transforms[i0]._encode_one(buf)
        for i0 in range(self.twist_length):
            assert self.twist[i0]._get_packed_fingerprint() == geometry_msgs.Twist._get_packed_fingerprint()
            self.twist[i0]._encode_one(buf)
        for i0 in range(self.wrench_length):
            assert self.wrench[i0]._get_packed_fingerprint() == geometry_msgs.Wrench._get_packed_fingerprint()
            self.wrench[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != MultiDOFJointState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return MultiDOFJointState._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = MultiDOFJointState()
        self.joint_names_length, self.transforms_length, self.twist_length, self.wrench_length = struct.unpack(">iiii", buf.read(16))
        self.header = std_msgs.Header._decode_one(buf)
        self.joint_names = []
        for i0 in range(self.joint_names_length):
            __joint_names_len = struct.unpack('>I', buf.read(4))[0]
            self.joint_names.append(buf.read(__joint_names_len)[:-1].decode('utf-8', 'replace'))
        self.transforms = []
        for i0 in range(self.transforms_length):
            self.transforms.append(geometry_msgs.Transform._decode_one(buf))
        self.twist = []
        for i0 in range(self.twist_length):
            self.twist.append(geometry_msgs.Twist._decode_one(buf))
        self.wrench = []
        for i0 in range(self.wrench_length):
            self.wrench.append(geometry_msgs.Wrench._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if MultiDOFJointState in parents: return 0
        newparents = parents + [MultiDOFJointState]
        tmphash = (0x15ca331f6f9f4fbc+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Transform._get_hash_recursive(newparents)+ geometry_msgs.Twist._get_hash_recursive(newparents)+ geometry_msgs.Wrench._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if MultiDOFJointState._packed_fingerprint is None:
            MultiDOFJointState._packed_fingerprint = struct.pack(">Q", MultiDOFJointState._get_hash_recursive([]))
        return MultiDOFJointState._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", MultiDOFJointState._get_packed_fingerprint())[0]

