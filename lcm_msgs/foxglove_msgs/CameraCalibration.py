"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import builtin_interfaces
class CameraCalibration(object):

    __slots__ = ["d_length", "timestamp", "frame_id", "width", "height", "distortion_model", "d", "k", "r", "p"]

    __typenames__ = ["int32_t", "builtin_interfaces.Time", "string", "int32_t", "int32_t", "string", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, ["d_length"], [9], [9], [12]]

    def __init__(self):
        self.d_length = 0
        """ LCM Type: int32_t """
        self.timestamp = builtin_interfaces.Time()
        """ LCM Type: builtin_interfaces.Time """
        self.frame_id = ""
        """ LCM Type: string """
        self.width = 0
        """ LCM Type: int32_t """
        self.height = 0
        """ LCM Type: int32_t """
        self.distortion_model = ""
        """ LCM Type: string """
        self.d = []
        """ LCM Type: double[d_length] """
        self.k = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """
        self.r = [ 0.0 for dim0 in range(9) ]
        """ LCM Type: double[9] """
        self.p = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: double[12] """

    def encode(self):
        buf = BytesIO()
        buf.write(CameraCalibration._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.d_length))
        assert self.timestamp._get_packed_fingerprint() == builtin_interfaces.Time._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        __frame_id_encoded = self.frame_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_id_encoded)+1))
        buf.write(__frame_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ii", self.width, self.height))
        __distortion_model_encoded = self.distortion_model.encode('utf-8')
        buf.write(struct.pack('>I', len(__distortion_model_encoded)+1))
        buf.write(__distortion_model_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.d_length, *self.d[:self.d_length]))
        buf.write(struct.pack('>9d', *self.k[:9]))
        buf.write(struct.pack('>9d', *self.r[:9]))
        buf.write(struct.pack('>12d', *self.p[:12]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CameraCalibration._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CameraCalibration._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = CameraCalibration()
        self.d_length = struct.unpack(">i", buf.read(4))[0]
        self.timestamp = builtin_interfaces.Time._decode_one(buf)
        __frame_id_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_id = buf.read(__frame_id_len)[:-1].decode('utf-8', 'replace')
        self.width, self.height = struct.unpack(">ii", buf.read(8))
        __distortion_model_len = struct.unpack('>I', buf.read(4))[0]
        self.distortion_model = buf.read(__distortion_model_len)[:-1].decode('utf-8', 'replace')
        self.d = struct.unpack('>%dd' % self.d_length, buf.read(self.d_length * 8))
        self.k = struct.unpack('>9d', buf.read(72))
        self.r = struct.unpack('>9d', buf.read(72))
        self.p = struct.unpack('>12d', buf.read(96))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if CameraCalibration in parents: return 0
        newparents = parents + [CameraCalibration]
        tmphash = (0x89c275083a857ce2+ builtin_interfaces.Time._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if CameraCalibration._packed_fingerprint is None:
            CameraCalibration._packed_fingerprint = struct.pack(">Q", CameraCalibration._get_hash_recursive([]))
        return CameraCalibration._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", CameraCalibration._get_packed_fingerprint())[0]

