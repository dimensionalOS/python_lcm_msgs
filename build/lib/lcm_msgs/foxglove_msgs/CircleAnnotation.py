"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from lcm_msgs import builtin_interfaces
from .Color import Color
from .Point2 import Point2
class CircleAnnotation(object):

    __slots__ = ["timestamp", "position", "diameter", "thickness", "fill_color", "outline_color"]

    __typenames__ = ["builtin_interfaces.Time", "Point2", "double", "double", "Color", "Color"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = builtin_interfaces.Time()
        """ LCM Type: builtin_interfaces.Time """
        self.position = Point2()
        """ LCM Type: Point2 """
        self.diameter = 0.0
        """ LCM Type: double """
        self.thickness = 0.0
        """ LCM Type: double """
        self.fill_color = Color()
        """ LCM Type: Color """
        self.outline_color = Color()
        """ LCM Type: Color """

    def encode(self):
        buf = BytesIO()
        buf.write(CircleAnnotation._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.timestamp._get_packed_fingerprint() == builtin_interfaces.Time._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        assert self.position._get_packed_fingerprint() == Point2._get_packed_fingerprint()
        self.position._encode_one(buf)
        buf.write(struct.pack(">dd", self.diameter, self.thickness))
        assert self.fill_color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.fill_color._encode_one(buf)
        assert self.outline_color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.outline_color._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CircleAnnotation._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CircleAnnotation._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = CircleAnnotation()
        self.timestamp = builtin_interfaces.Time._decode_one(buf)
        self.position = Point2._decode_one(buf)
        self.diameter, self.thickness = struct.unpack(">dd", buf.read(16))
        self.fill_color = Color._decode_one(buf)
        self.outline_color = Color._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if CircleAnnotation in parents: return 0
        newparents = parents + [CircleAnnotation]
        tmphash = (0x5a3219098258887c+ builtin_interfaces.Time._get_hash_recursive(newparents)+ Point2._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if CircleAnnotation._packed_fingerprint is None:
            CircleAnnotation._packed_fingerprint = struct.pack(">Q", CircleAnnotation._get_hash_recursive([]))
        return CircleAnnotation._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", CircleAnnotation._get_packed_fingerprint())[0]

