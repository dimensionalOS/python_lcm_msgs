"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from lcm_msgs import builtin_interfaces
from .Color import Color
from .Point2 import Point2
class PointsAnnotation(object):

    __slots__ = ["points_length", "outline_colors_length", "timestamp", "type", "points", "outline_color", "outline_colors", "fill_color", "thickness"]

    __typenames__ = ["int32_t", "int32_t", "builtin_interfaces.Time", "byte", "Point2", "Color", "Color", "Color", "double"]

    __dimensions__ = [None, None, None, None, ["points_length"], None, ["outline_colors_length"], None, None]

    UNKNOWN = 0
    POINTS = 1
    LINE_LOOP = 2
    LINE_STRIP = 3
    LINE_LIST = 4

    def __init__(self):
        self.points_length = 0
        """ LCM Type: int32_t """
        self.outline_colors_length = 0
        """ LCM Type: int32_t """
        self.timestamp = builtin_interfaces.Time()
        """ LCM Type: builtin_interfaces.Time """
        self.type = 0
        """ LCM Type: byte """
        self.points = []
        """ LCM Type: Point2[points_length] """
        self.outline_color = Color()
        """ LCM Type: Color """
        self.outline_colors = []
        """ LCM Type: Color[outline_colors_length] """
        self.fill_color = Color()
        """ LCM Type: Color """
        self.thickness = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(PointsAnnotation._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.points_length, self.outline_colors_length))
        assert self.timestamp._get_packed_fingerprint() == builtin_interfaces.Time._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        buf.write(struct.pack(">B", self.type))
        for i0 in range(self.points_length):
            assert self.points[i0]._get_packed_fingerprint() == Point2._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        assert self.outline_color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.outline_color._encode_one(buf)
        for i0 in range(self.outline_colors_length):
            assert self.outline_colors[i0]._get_packed_fingerprint() == Color._get_packed_fingerprint()
            self.outline_colors[i0]._encode_one(buf)
        assert self.fill_color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.fill_color._encode_one(buf)
        buf.write(struct.pack(">d", self.thickness))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PointsAnnotation._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PointsAnnotation._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = PointsAnnotation()
        self.points_length, self.outline_colors_length = struct.unpack(">ii", buf.read(8))
        self.timestamp = builtin_interfaces.Time._decode_one(buf)
        self.type = struct.unpack(">B", buf.read(1))[0]
        self.points = []
        for i0 in range(self.points_length):
            self.points.append(Point2._decode_one(buf))
        self.outline_color = Color._decode_one(buf)
        self.outline_colors = []
        for i0 in range(self.outline_colors_length):
            self.outline_colors.append(Color._decode_one(buf))
        self.fill_color = Color._decode_one(buf)
        self.thickness = struct.unpack(">d", buf.read(8))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if PointsAnnotation in parents: return 0
        newparents = parents + [PointsAnnotation]
        tmphash = (0x97465363cc7c2a18+ builtin_interfaces.Time._get_hash_recursive(newparents)+ Point2._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if PointsAnnotation._packed_fingerprint is None:
            PointsAnnotation._packed_fingerprint = struct.pack(">Q", PointsAnnotation._get_hash_recursive([]))
        return PointsAnnotation._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PointsAnnotation._get_packed_fingerprint())[0]

