"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class Marker(object):

    __slots__ = ["points_length", "colors_length", "header", "ns", "id", "type", "action", "pose", "scale", "color", "lifetime", "frame_locked", "points", "colors", "text", "mesh_resource", "mesh_use_embedded_materials"]

    __typenames__ = ["int32_t", "int32_t", "std_msgs.Header", "string", "int32_t", "int32_t", "int32_t", "geometry_msgs.Pose", "geometry_msgs.Vector3", "std_msgs.ColorRGBA", "std_msgs.Duration", "boolean", "geometry_msgs.Point", "std_msgs.ColorRGBA", "string", "string", "boolean"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, ["points_length"], ["colors_length"], None, None, None]

    ARROW = 0
    CUBE = 1
    SPHERE = 2
    CYLINDER = 3
    LINE_STRIP = 4
    LINE_LIST = 5
    CUBE_LIST = 6
    SPHERE_LIST = 7
    POINTS = 8
    TEXT_VIEW_FACING = 9
    MESH_RESOURCE = 10
    TRIANGLE_LIST = 11
    ADD = 0
    MODIFY = 0
    DELETE = 2
    DELETEALL = 3

    def __init__(self):
        self.points_length = 0
        """ LCM Type: int32_t """
        self.colors_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.ns = ""
        """ LCM Type: string """
        self.id = 0
        """ LCM Type: int32_t """
        self.type = 0
        """ LCM Type: int32_t """
        self.action = 0
        """ LCM Type: int32_t """
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.scale = geometry_msgs.Vector3()
        """ LCM Type: geometry_msgs.Vector3 """
        self.color = std_msgs.ColorRGBA()
        """ LCM Type: std_msgs.ColorRGBA """
        self.lifetime = std_msgs.Duration()
        """ LCM Type: std_msgs.Duration """
        self.frame_locked = False
        """ LCM Type: boolean """
        self.points = []
        """ LCM Type: geometry_msgs.Point[points_length] """
        self.colors = []
        """ LCM Type: std_msgs.ColorRGBA[colors_length] """
        self.text = ""
        """ LCM Type: string """
        self.mesh_resource = ""
        """ LCM Type: string """
        self.mesh_use_embedded_materials = False
        """ LCM Type: boolean """

    def encode(self):
        buf = BytesIO()
        buf.write(Marker._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.points_length, self.colors_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        __ns_encoded = self.ns.encode('utf-8')
        buf.write(struct.pack('>I', len(__ns_encoded)+1))
        buf.write(__ns_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iii", self.id, self.type, self.action))
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        assert self.scale._get_packed_fingerprint() == geometry_msgs.Vector3._get_packed_fingerprint()
        self.scale._encode_one(buf)
        assert self.color._get_packed_fingerprint() == std_msgs.ColorRGBA._get_packed_fingerprint()
        self.color._encode_one(buf)
        assert self.lifetime._get_packed_fingerprint() == std_msgs.Duration._get_packed_fingerprint()
        self.lifetime._encode_one(buf)
        buf.write(struct.pack(">b", self.frame_locked))
        for i0 in range(self.points_length):
            assert self.points[i0]._get_packed_fingerprint() == geometry_msgs.Point._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        for i0 in range(self.colors_length):
            assert self.colors[i0]._get_packed_fingerprint() == std_msgs.ColorRGBA._get_packed_fingerprint()
            self.colors[i0]._encode_one(buf)
        __text_encoded = self.text.encode('utf-8')
        buf.write(struct.pack('>I', len(__text_encoded)+1))
        buf.write(__text_encoded)
        buf.write(b"\0")
        __mesh_resource_encoded = self.mesh_resource.encode('utf-8')
        buf.write(struct.pack('>I', len(__mesh_resource_encoded)+1))
        buf.write(__mesh_resource_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">b", self.mesh_use_embedded_materials))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Marker._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Marker._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = Marker()
        self.points_length, self.colors_length = struct.unpack(">ii", buf.read(8))
        self.header = std_msgs.Header._decode_one(buf)
        __ns_len = struct.unpack('>I', buf.read(4))[0]
        self.ns = buf.read(__ns_len)[:-1].decode('utf-8', 'replace')
        self.id, self.type, self.action = struct.unpack(">iii", buf.read(12))
        self.pose = geometry_msgs.Pose._decode_one(buf)
        self.scale = geometry_msgs.Vector3._decode_one(buf)
        self.color = std_msgs.ColorRGBA._decode_one(buf)
        self.lifetime = std_msgs.Duration._decode_one(buf)
        self.frame_locked = bool(struct.unpack('b', buf.read(1))[0])
        self.points = []
        for i0 in range(self.points_length):
            self.points.append(geometry_msgs.Point._decode_one(buf))
        self.colors = []
        for i0 in range(self.colors_length):
            self.colors.append(std_msgs.ColorRGBA._decode_one(buf))
        __text_len = struct.unpack('>I', buf.read(4))[0]
        self.text = buf.read(__text_len)[:-1].decode('utf-8', 'replace')
        __mesh_resource_len = struct.unpack('>I', buf.read(4))[0]
        self.mesh_resource = buf.read(__mesh_resource_len)[:-1].decode('utf-8', 'replace')
        self.mesh_use_embedded_materials = bool(struct.unpack('b', buf.read(1))[0])
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if Marker in parents: return 0
        newparents = parents + [Marker]
        tmphash = (0x707e24d8bc038bd3+ std_msgs.Header._get_hash_recursive(newparents)+ geometry_msgs.Pose._get_hash_recursive(newparents)+ geometry_msgs.Vector3._get_hash_recursive(newparents)+ std_msgs.ColorRGBA._get_hash_recursive(newparents)+ std_msgs.Duration._get_hash_recursive(newparents)+ geometry_msgs.Point._get_hash_recursive(newparents)+ std_msgs.ColorRGBA._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if Marker._packed_fingerprint is None:
            Marker._packed_fingerprint = struct.pack(">Q", Marker._get_hash_recursive([]))
        return Marker._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Marker._get_packed_fingerprint())[0]

