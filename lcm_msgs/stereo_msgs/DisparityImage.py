"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import std_msgs
from lcm_msgs import sensor_msgs
class DisparityImage(object):

    __slots__ = ["header", "image", "f", "T", "valid_window", "min_disparity", "max_disparity", "delta_d"]

    __typenames__ = ["std_msgs.Header", "sensor_msgs.Image", "float", "float", "sensor_msgs.RegionOfInterest", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    def __init__(self):
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.image = sensor_msgs.Image()
        """ LCM Type: sensor_msgs.Image """
        self.f = 0.0
        """ LCM Type: float """
        self.T = 0.0
        """ LCM Type: float """
        self.valid_window = sensor_msgs.RegionOfInterest()
        """ LCM Type: sensor_msgs.RegionOfInterest """
        self.min_disparity = 0.0
        """ LCM Type: float """
        self.max_disparity = 0.0
        """ LCM Type: float """
        self.delta_d = 0.0
        """ LCM Type: float """

    def encode(self):
        buf = BytesIO()
        buf.write(DisparityImage._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.image._get_packed_fingerprint() == sensor_msgs.Image._get_packed_fingerprint()
        self.image._encode_one(buf)
        buf.write(struct.pack(">ff", self.f, self.T))
        assert self.valid_window._get_packed_fingerprint() == sensor_msgs.RegionOfInterest._get_packed_fingerprint()
        self.valid_window._encode_one(buf)
        buf.write(struct.pack(">fff", self.min_disparity, self.max_disparity, self.delta_d))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != DisparityImage._get_packed_fingerprint():
            raise ValueError("Decode error")
        return DisparityImage._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = DisparityImage()
        self.header = std_msgs.Header._decode_one(buf)
        self.image = sensor_msgs.Image._decode_one(buf)
        self.f, self.T = struct.unpack(">ff", buf.read(8))
        self.valid_window = sensor_msgs.RegionOfInterest._decode_one(buf)
        self.min_disparity, self.max_disparity, self.delta_d = struct.unpack(">fff", buf.read(12))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if DisparityImage in parents: return 0
        newparents = parents + [DisparityImage]
        tmphash = (0xdeb7a557a2b9258a+ std_msgs.Header._get_hash_recursive(newparents)+ sensor_msgs.Image._get_hash_recursive(newparents)+ sensor_msgs.RegionOfInterest._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if DisparityImage._packed_fingerprint is None:
            DisparityImage._packed_fingerprint = struct.pack(">Q", DisparityImage._get_hash_recursive([]))
        return DisparityImage._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", DisparityImage._get_packed_fingerprint())[0]

