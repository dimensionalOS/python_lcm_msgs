"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from . import *
from .Color import Color
class ModelPrimitive(object):

    __slots__ = ["data_length", "pose", "scale", "color", "override_color", "url", "media_type", "data"]

    __typenames__ = ["int32_t", "geometry_msgs.Pose", "geometry_msgs.Vector3", "Color", "boolean", "string", "string", "byte"]

    __dimensions__ = [None, None, None, None, None, None, None, ["data_length"]]

    def __init__(self):
        self.data_length = 0
        """ LCM Type: int32_t """
        self.pose = geometry_msgs.Pose()
        """ LCM Type: geometry_msgs.Pose """
        self.scale = geometry_msgs.Vector3()
        """ LCM Type: geometry_msgs.Vector3 """
        self.color = Color()
        """ LCM Type: Color """
        self.override_color = False
        """ LCM Type: boolean """
        self.url = ""
        """ LCM Type: string """
        self.media_type = ""
        """ LCM Type: string """
        self.data = b""
        """ LCM Type: byte[data_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(ModelPrimitive._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.data_length))
        assert self.pose._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        assert self.scale._get_packed_fingerprint() == geometry_msgs.Vector3._get_packed_fingerprint()
        self.scale._encode_one(buf)
        assert self.color._get_packed_fingerprint() == Color._get_packed_fingerprint()
        self.color._encode_one(buf)
        buf.write(struct.pack(">b", self.override_color))
        __url_encoded = self.url.encode('utf-8')
        buf.write(struct.pack('>I', len(__url_encoded)+1))
        buf.write(__url_encoded)
        buf.write(b"\0")
        __media_type_encoded = self.media_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__media_type_encoded)+1))
        buf.write(__media_type_encoded)
        buf.write(b"\0")
        buf.write(bytearray(self.data[:self.data_length]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ModelPrimitive._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ModelPrimitive._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ModelPrimitive()
        self.data_length = struct.unpack(">i", buf.read(4))[0]
        self.pose = geometry_msgs.Pose._decode_one(buf)
        self.scale = geometry_msgs.Vector3._decode_one(buf)
        self.color = Color._decode_one(buf)
        self.override_color = bool(struct.unpack('b', buf.read(1))[0])
        __url_len = struct.unpack('>I', buf.read(4))[0]
        self.url = buf.read(__url_len)[:-1].decode('utf-8', 'replace')
        __media_type_len = struct.unpack('>I', buf.read(4))[0]
        self.media_type = buf.read(__media_type_len)[:-1].decode('utf-8', 'replace')
        self.data = buf.read(self.data_length)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ModelPrimitive in parents: return 0
        newparents = parents + [ModelPrimitive]
        tmphash = (0x23cd41ba898fa1fa+ geometry_msgs.Pose._get_hash_recursive(newparents)+ geometry_msgs.Vector3._get_hash_recursive(newparents)+ Color._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ModelPrimitive._packed_fingerprint is None:
            ModelPrimitive._packed_fingerprint = struct.pack(">Q", ModelPrimitive._get_hash_recursive([]))
        return ModelPrimitive._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ModelPrimitive._get_packed_fingerprint())[0]

