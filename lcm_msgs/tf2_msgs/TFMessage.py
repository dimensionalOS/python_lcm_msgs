"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
class TFMessage(object):

    __slots__ = ["transforms_length", "transforms"]

    __typenames__ = ["int32_t", "geometry_msgs.TransformStamped"]

    __dimensions__ = [None, ["transforms_length"]]

    def __init__(self):
        self.transforms_length = 0
        """ LCM Type: int32_t """
        self.transforms = []
        """ LCM Type: geometry_msgs.TransformStamped[transforms_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(TFMessage._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.transforms_length))
        for i0 in range(self.transforms_length):
            assert self.transforms[i0]._get_packed_fingerprint() == geometry_msgs.TransformStamped._get_packed_fingerprint()
            self.transforms[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TFMessage._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TFMessage._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = TFMessage()
        self.transforms_length = struct.unpack(">i", buf.read(4))[0]
        self.transforms = []
        for i0 in range(self.transforms_length):
            self.transforms.append(geometry_msgs.TransformStamped._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if TFMessage in parents: return 0
        newparents = parents + [TFMessage]
        tmphash = (0x37bc5cbce50a5ce2+ geometry_msgs.TransformStamped._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if TFMessage._packed_fingerprint is None:
            TFMessage._packed_fingerprint = struct.pack(">Q", TFMessage._get_hash_recursive([]))
        return TFMessage._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TFMessage._get_packed_fingerprint())[0]

